#line 2 "/home/jens/Projekte/calcparser/p1.cc"

#line 4 "/home/jens/Projekte/calcparser/p1.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[464] =
    {   0,
       59,   59,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,   55,   56,   56,   63,   61,
       59,   60,   61,   58,   58,   54,   58,   61,   61,   61,
       61,   61,   61,   61,   10,    9,   10,   62,   62,   62,
       62,   37,   62,   39,   40,   41,   42,   47,   50,   51,

       48,   49,   43,   62,   44,   46,   62,   18,   62,   62,
       62,   62,   62,   32,   30,   62,   62,   55,   62,   62,
       56,   62,   62,   59,   60,    3,    4,   54,    7,    1,
        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    8,    0,    0,    0,   37,   37,    0,   39,   39,
       41,   41,    0,    0,    0,    0,    0,    0,   45,   44,
       44,    0,   18,   18,    0,    0,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   33,   32,   32,    0,   31,   30,   30,    0,    0,
        0,    0,    0,   55,    0,    0,   55,    0,   55,   56,

        0,    0,   56,    0,   56,    3,    5,    3,    4,    6,
        1,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
       45,    0,    0,   19,    0,    0,    0,    0,    0,    0,
       33,   31,    0,    0,    0,    0,   55,   55,   55,   55,
        0,    0,    0,   55,   55,   55,   55,   56,   56,   56,
       56,    0,    0,    0,   56,   56,   56,   56,    0,    0,
        0,    0,    0,    0,    0,   34,    0,    0,    0,   47,
       50,   51,    0,    0,    0,   53,   23,    0,    0,    0,
        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   28,   28,    0,   55,   55,    0,    0,
       55,   55,   55,   56,   56,    0,    0,   56,   56,   56,
        0,   12,    0,    0,   15,    0,    0,   35,    0,    0,
        0,    0,    0,   27,    0,   21,    0,    0,   22,    0,
       26,    0,    0,   28,   28,   28,   28,   28,   28,   28,
       28,    0,   55,   55,   55,   55,   55,   55,   55,   55,
        0,   55,   55,   56,   56,   56,   56,   56,   56,   56,
       56,    0,   56,   56,    0,    0,   13,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,   28,   28,   28,   28,   28,   28,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   47,   48,   49,    0,   20,   24,   25,   28,
        0,    0,   17,    0,    0,    0,    0,    0,   29,    0,
       14,    0,    0,    0,   57,    0,   36,   38,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   30,   31,   32,   33,   34,   35,
       30,   36,   37,   38,   39,   30,   40,   41,   30,   30,
       42,    1,   43,   44,   30,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   30,   30,   54,   55,   56,
       57,   58,   30,   59,   60,   61,   62,   30,   63,   64,
       30,   30,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    3,    2,    1,    1,    4,    5,    1,    1,
        6,    1,    7,    1,    8,    1,    1,    9,    1,    1,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,    1,    1,    1,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,    1
    } ;

static yyconst flex_int16_t yy_base[530] =
    {   0,
        0,    0,   63,   64,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   43,  104,  169,  234,  299,
     1171, 1166,  364,  429, 1163, 1138,  473,  508, 1134, 1133,
     1129, 1118,    0,    0,  564,  629, 1112, 1111,    0,    0,
       72,   80,   45,   46,  694,  759,    0,    0,  824,  889,
      954, 1019, 1084, 1149, 1214, 1279, 1344, 1409,   52,   53,
        0,    0,    0,    0,  123,  128,  137,  150, 1106, 2561,
     1074, 1072, 1067, 1063, 2561,   73,   76,  188,  448,  206,
      270,  264,  212, 1062, 2561, 2561, 1046, 2561,  104,  114,
      110,   76,  112,   83, 2561, 1040, 2561,  110,  165,  173,

      111,  157, 2561, 1039,  150, 2561,  195,  256,  230,  320,
      323,  454,  342,  345,  348,  478,  167,  383, 1011,  141,
      388, 1010,  149, 1002,  992,  192,  987,   84, 2561,  986,
      396,  401,  420,  496,  542,  601,  610,  522, 1431, 1440,
      974, 2561,  174,  179,  203,    0,  207,  236,    0,  249,
        0,  930,  235,  249,  292,  244,  299,  272,  942,  931,
      282,  330,  407,  413,  302,  364,  457,  423,  514,  586,
      488,  545,  548,  596,  655, 1435,  589,  593,  650,  662,
      658,  618,  676,  714,  679,  682,  717,  720,  747,  750,
      854, 1458,  372,  741,  920,  910,  472,  272,  727,  783,

      911,  901,  777,  392,  792,    0, 2561,  452,  875, 2561,
      867, 2561,  790,  464, 1464,  932,  997, 1062, 1127,  856,
      484,  423,  474,  484,  505,  698,  509,  557,  642,  472,
      846,  707,  729,  806,  809,  857,  926, 1182,  812,  976,
      815,  818,  821, 1274, 1179,  827,  848,  849,  873,  907,
      459,  614,  909,  913,  934,  978,  979,  999, 1000, 1037,
     1038,  615,  737, 1044, 1042, 1043, 1064, 1065,  880, 1485,
     1491, 1310, 1376, 1508,  831, 2561,  828,  897,  900,  927,
     2561, 2561,  963,  952,  737, 2561, 2561, 1024, 1106,  878,
     1114, 1131, 1172, 1197, 1515, 1235, 1135, 1241,  787, 1247,

      881, 1532, 1269, 1535, 1552, 1028, 1108, 1109, 1193,  774,
     1302, 1174, 1249, 1261, 1304, 1195,  728, 1367, 1324, 1326,
     1005, 1380, 1555, 1572, 1579, 1597,  719, 2561, 1114, 1213,
     1060, 1288, 1286, 2561, 1333, 2561, 1467, 1558, 1529, 1397,
     2561, 1603, 1370,  711, 1621, 1624, 1382, 1614, 1628, 1657,
     1664, 1344, 1390, 1499, 1565, 1607, 1673, 1461, 1686, 1494,
      787, 1651, 1690, 1691, 1696, 1697, 1703, 1716, 1720, 1724,
     1733,  796, 1726, 1735, 1740, 1743, 1749, 1753, 1757,  673,
     1347, 1436, 1214, 1288, 1467, 1774, 1777, 1780, 1784,  676,
      675,    0,  661, 1794, 1799, 1802, 1817, 1827, 1330,  647,

     1635,  646, 1642, 1835, 1844, 1860, 1866, 1872, 1889,  620,
     1472, 1488, 2561, 2561, 2561, 1876, 2561, 2561, 2561, 1893,
     1488, 1897, 2561, 1907, 1913,  595, 1528, 1539, 2561, 1933,
     1937,  569,  534,  524, 1942,  537, 2561, 2561,  458,  496,
      475,  460,  408,  413,  411,  393,  377,  354,  345,  298,
      285,  278,  247,  274,  224,  218,  142,  161,  141,  120,
       80, 2561, 2561, 1992, 2002, 2012, 2022, 2032, 2042, 2052,
     2062, 2072, 2082, 2092, 2102, 2111, 2115, 2119, 2122, 2127,
     2136, 2145, 2154, 2163, 2172, 2181, 2191, 2201, 2211, 2220,
     2224, 2228, 2231, 2236, 2245, 2254, 2263, 2272, 2281, 2290,

     2299, 2308, 2318, 2328, 2338, 2348, 2358, 2368, 2378, 2388,
     2398, 2407, 2416, 2425, 2434, 2443, 2452, 2461, 2470, 2479,
     2489, 2499, 2508, 2511, 2520, 2529, 2538, 2541, 2550
    } ;

static yyconst flex_int16_t yy_def[530] =
    {   0,
      463,    1,  464,  464,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  466,  466,  467,  467,
      465,  465,  468,  468,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  469,  469,  465,  465,  465,  465,
      465,  465,  465,  465,  470,  470,  465,  465,  471,  471,
      472,  472,  473,  473,  474,  474,  475,  475,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  476,  476,  476,
      476,  476,  476,  463,  463,  463,  463,  463,  463,  463,
      463,  477,  463,  478,  463,  479,  463,  463,  463,  463,

      463,  463,  463,  463,  480,  463,  463,  463,  463,  481,
      482,  482,  483,  484,  485,  486,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  487,  488,  463,  463,  489,
      463,  490,  463,  476,  476,  476,  476,  476,  476,  476,
      463,  463,  463,  463,  463,  491,  477,  463,  492,  478,
      493,  479,  463,  463,  463,  463,  463,  463,  463,  494,
      480,  463,  463,  463,  463,  463,  463,  463,  495,  481,
      463,  496,  497,  482,  482,  482,  463,  498,  499,  483,
      463,  463,  500,  484,  463,  463,  501,  485,  463,  502,
      486,  486,  463,  463,  463,  463,  503,  504,  505,  463,

      463,  463,  506,  507,  508,  509,  463,  509,  510,  463,
      511,  463,  463,  463,  512,  512,  512,  512,  512,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  496,  513,  482,  482,  498,  514,
      463,  463,  463,  502,  515,  463,  503,  463,  503,  503,
      504,  463,  504,  505,  463,  505,  505,  506,  463,  506,
      506,  507,  463,  507,  508,  463,  508,  508,  463,  512,
      512,  512,  512,  512,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      516,  463,  513,  482,  482,  463,  463,  517,  463,  514,

      518,  519,  518,  520,  520,  463,  503,  521,  504,  463,
      504,  521,  505,  506,  522,  507,  463,  507,  522,  508,
      523,  512,  512,  512,  512,  512,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  482,  463,
      463,  463,  518,  524,  525,  525,  524,  526,  520,  520,
      520,  463,  521,  463,  521,  521,  504,  463,  504,  463,
      504,  521,  521,  522,  463,  522,  522,  507,  463,  507,
      463,  507,  522,  522,  523,  527,  512,  512,  512,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  528,  524,  525,  525,  525,  524,  526,  463,  463,

      504,  463,  507,  463,  463,  529,  527,  512,  512,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  525,
      463,  463,  463,  512,  512,  463,  463,  463,  463,  512,
      512,  463,  463,  463,  512,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,    0,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463
    } ;

static yyconst flex_int16_t yy_nxt[2627] =
    {   0,
       70,   71,   72,   70,   70,   73,   70,   70,   74,   75,
       70,   75,   76,   77,   76,   70,   70,   70,   70,   70,
       78,   78,   79,   78,   78,   78,   78,   80,   81,   78,
       82,   78,   78,   78,   83,   78,   78,   78,   78,   78,
       78,   70,   70,   84,   78,   78,   79,   78,   78,   78,
       78,   80,   81,   82,   78,   78,   78,   83,   78,   78,
       78,   78,   78,   78,   70,   86,   86,   89,   89,  109,
      109,   87,   87,  107,  107,  107,  117,  117,  108,   90,
       90,  107,  107,  107,  129,  128,  108,  128,  146,  130,
      146,   89,   89,  109,  109,  149,  128,  149,  128,  462,

      117,  117,   90,   90,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       91,   88,   88,   88,  118,  118,  118,  461,  119,  118,
      118,  118,  143,  119,  144,  145,  120,  148,  121,  121,
      121,  120,  122,  153,  156,   88,   88,   88,  460,  198,
      123,  121,  121,  121,  199,  122,  143,  204,  144,  145,
      159,  148,  205,  123,  160,  459,  153,  156,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   91,   88,   88,   88,  131,
      131,  131,  154,  155,  207,  157,  162,  162,  162,  193,

      222,  163,  132,  208,  221,  133,  458,  131,  131,  131,
       88,   88,   88,  131,  131,  131,  154,  155,  157,  146,
      132,  146,  193,  133,  222,  457,  132,  221,  456,  133,
      137,  223,  140,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       93,   88,   88,   88,  137,  223,  140,  164,  164,  164,
      165,  149,  166,  149,  224,  131,  131,  131,  225,  226,
      228,  131,  131,  131,  252,   88,   88,   88,  132,  230,
      253,  133,  455,  165,  132,  166,  158,  133,  224,  454,
      453,  225,  159,  226,  228,  138,  160,  139,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   93,   88,   88,   88,  138,
      139,  167,  167,  167,  171,  171,  171,  168,  452,  227,
      229,  162,  162,  162,  169,  172,  163,  173,  232,  451,
       88,   88,   88,  177,  177,  177,  181,  181,  181,  185,
      185,  185,  227,  229,  178,  182,  179,  450,  186,  183,
      449,  232,  187,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  194,  194,  194,  233,  195,  200,
      200,  200,  448,  201,  263,  246,  196,  131,  131,  131,

      264,  202,  131,  131,  131,   88,   88,   88,  164,  164,
      164,  233,  447,  133,  164,  164,  164,  446,  133,  246,
      445,  213,  213,  213,  234,  234,  234,  444,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  131,
      131,  131,  214,  277,  207,  171,  171,  171,  167,  167,
      167,  463,  132,  208,  168,  133,  172,  309,  173,  443,
       88,   88,   88,  285,  248,  214,  277,  249,  135,  189,
      189,  189,  286,  136,  175,  250,  176,  442,  269,  171,
      171,  171,  190,   88,   98,   99,  100,  131,  131,  131,

      172,  135,  441,  101,  278,  102,  136,  175,  276,  176,
      132,  192,  269,  133,  279,  167,  167,  167,   98,   99,
      100,  168,  440,  131,  131,  131,  101,  278,  102,   98,
       99,  100,  276,  282,  192,  280,  132,  279,  101,  133,
      102,  439,  438,  131,  131,  131,  235,  235,  235,  171,
      171,  171,  437,   98,   99,  100,  132,  282,  280,  133,
      172,  101,  215,  102,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  436,  283,  215,  167,  167,  167,
      177,  177,  177,  168,  239,  239,  239,  171,  171,  171,

      169,  178,  131,  131,  131,   88,   88,   88,  172,  283,
      173,  131,  131,  131,  432,  132,  252,  463,  133,  241,
      241,  241,  310,  316,  132,  216,  426,  133,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  216,
      217,  177,  177,  177,  204,  198,  171,  171,  171,  181,
      181,  181,  178,  177,  177,  177,  284,  172,  182,  173,
       88,   88,   88,  217,  178,  392,  179,  181,  181,  181,
      185,  185,  185,  242,  242,  242,  182,  419,  418,  186,
      284,  237,  410,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  237,  181,  181,  181,  185,  185,
      185,  185,  185,  185,  182,  392,  380,  186,  183,  255,
      186,  287,  256,  281,  187,   88,   88,   88,  285,  263,
      257,  369,  194,  194,  194,  317,  195,  286,  189,  189,
      189,  189,  189,  189,  196,  287,  281,  288,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  259,
      243,  288,  260,  244,  200,  200,  200,  358,  201,  463,
      261,  213,  213,  213,  266,  401,  202,  267,  463,  342,

       88,   88,   88,  243,  403,  268,  244,  234,  234,  234,
      235,  235,  235,  239,  239,  239,  241,  241,  241,  242,
      242,  242,  214,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  327,  214,  301,  231,  112,  306,
      248,  248,  328,  249,  195,  189,  189,  189,  289,  289,
      289,  250,  196,  290,  275,   88,   88,   88,  190,  212,
      301,  291,  112,  306,  292,  248,  328,  210,  307,  335,
      335,  335,  343,  343,  343,  336,  250,  192,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,  248,
      192,  463,  249,  112,  205,  255,  203,  309,  256,  321,
      308,  329,  311,  199,  330,  197,  257,  171,  171,  171,
       88,   88,   88,  131,  131,  131,  255,  112,  172,  195,
      173,  159,  321,  231,  151,  329,  132,  196,  330,  133,
      294,  331,  271,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  294,  331,  271,  296,  296,  296,
      255,  255,  297,  312,  256,  332,  220,  333,  212,  210,
      298,  257,  313,  299,  125,   88,   88,   88,  131,  131,

      131,  259,  259,  124,  260,  201,  375,  375,  375,  332,
      333,  132,  261,  202,  133,  203,  197,  272,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  259,
      259,  272,  314,  260,  266,  266,  463,  267,  201,  334,
      261,  315,  316,  158,  151,  268,  202,  318,  352,  142,
       88,   88,   88,  131,  131,  131,  266,  266,  141,  319,
      267,  127,  126,  334,  125,  124,  132,  268,  320,  133,
      383,  352,  273,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,  383,  463,  273,  289,  289,  289,
      248,  354,  290,  307,  355,  289,  289,  289,  106,  106,
      290,  250,  356,  292,  104,   88,   88,   88,  131,  131,
      131,  292,  337,  337,  337,  104,  340,  340,  340,  103,
      103,  132,  341,  338,  133,   97,  381,  274,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  381,
       97,  274,   95,  289,  289,  289,  354,   95,  290,  362,
      303,  303,  303,  171,  171,  171,  291,  363,  463,  292,
       88,   88,   88,  190,  172,  463,  173,  463,  171,  171,

      171,  309,  463,  316,  463,  463,  357,  463,  368,  172,
      295,  173,  305,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  295,  305,  296,  296,  296,  463,
      463,  297,  296,  296,  296,  382,  413,  297,  296,  296,
      296,  255,  299,  297,  256,   88,   88,   88,  299,  463,
      463,  298,  313,  259,  299,  463,  314,  463,  382,  413,
      303,  303,  303,  463,  261,  189,  189,  189,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  302,

      463,  463,  347,  359,  360,  359,  365,  244,  384,  366,
      309,  131,  131,  131,  385,  361,  463,  367,  414,  463,
       88,   88,   88,  302,  132,  347,  365,  133,  266,  373,
      244,  267,  384,  463,  335,  335,  335,  374,  385,  320,
      336,  414,  324,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  399,  324,  421,  411,  370,  371,
      370,  343,  343,  343,  463,  316,  463,  131,  131,  131,
      372,  131,  131,  131,  463,   88,   88,   88,  399,  421,
      132,  411,  354,  133,  132,  355,  392,  133,  340,  340,

      340,  463,  463,  363,  341,  463,  325,  397,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,  325,
      463,  397,  131,  131,  131,  463,  171,  171,  171,  463,
      463,  131,  131,  131,  463,  132,  463,  172,  133,  173,
       88,   88,   88,  218,  132,  463,  412,  133,  238,  189,
      189,  189,  360,  360,  360,  131,  131,  131,  337,  337,
      337,  463,  190,   88,  400,  219,  463,  218,  132,  338,
      412,  133,  238,  245,  463,  463,  131,  131,  131,  415,
      463,  192,  131,  131,  131,  360,  360,  360,  219,  132,

      270,  354,  133,  427,  195,  132,  463,  245,  133,  131,
      131,  131,  196,  415,  192,  463,  171,  171,  171,  428,
      463,  322,  132,  270,  429,  133,  427,  172,  323,  173,
      171,  171,  171,  303,  303,  303,  189,  189,  189,  326,
      339,  172,  428,  173,  322,  463,  190,  429,  463,  348,
      463,  323,  433,  189,  189,  189,  131,  131,  131,  386,
      386,  386,  326,  434,  339,  346,  348,  354,  350,  132,
      362,  463,  133,  131,  131,  131,  433,  351,  363,  377,
      131,  131,  131,  387,  463,  350,  132,  434,  346,  133,
      463,  350,  463,  132,  463,  388,  133,  463,  131,  131,

      131,  351,  463,  377,  389,  389,  389,  387,  350,  354,
      378,  132,  355,  463,  133,  189,  189,  189,  388,  463,
      356,  379,  189,  189,  189,  189,  189,  189,  390,  189,
      189,  189,  463,  378,  463,  348,  463,  252,  348,  463,
      391,  463,  348,  253,  263,  379,  463,  398,  357,  396,
      264,  463,  390,  354,  395,  368,  362,  395,  189,  189,
      189,  350,  463,  391,  363,  303,  303,  303,  463,  463,
      398,  348,  463,  396,  359,  360,  359,  395,  348,  463,
      395,  309,  351,  463,  350,  463,  361,  359,  360,  359,
      350,  463,  354,  365,  309,  355,  366,  350,  365,  365,

      463,  201,  373,  356,  374,  365,  351,  463,  366,  202,
      374,  463,  463,  350,  463,  463,  367,  370,  371,  370,
      350,  371,  371,  371,  316,  370,  371,  370,  365,  372,
      463,  373,  316,  402,  371,  371,  371,  365,  463,  374,
      366,  375,  375,  375,  404,  404,  404,  463,  367,  405,
      131,  131,  131,  463,  131,  131,  131,  406,  131,  131,
      131,  463,  463,  132,  463,  463,  133,  132,  463,  463,
      133,  132,  463,  463,  133,  386,  386,  386,  416,  416,
      416,  416,  416,  416,  408,  389,  389,  389,  463,  417,
      463,  463,  417,  463,  409,  189,  189,  189,  463,  387,

      189,  189,  189,  303,  303,  303,  463,  408,  348,  390,
      463,  388,  463,  348,  463,  463,  348,  409,  343,  343,
      343,  391,  463,  387,  396,  463,  463,  395,  189,  189,
      189,  392,  395,  390,  388,  395,  404,  404,  404,  463,
      463,  405,  463,  463,  391,  422,  422,  422,  396,  463,
      395,  423,  420,  463,  463,  395,  463,  463,  395,  463,
      398,  404,  404,  404,  463,  463,  405,  404,  404,  404,
      463,  463,  405,  131,  131,  131,  420,  416,  416,  416,
      406,  463,  463,  398,  463,  463,  132,  463,  417,  133,
      131,  131,  131,  424,  303,  303,  303,  463,  422,  422,

      422,  463,  463,  132,  423,  463,  133,  348,  131,  131,
      131,  463,  463,  425,  131,  131,  131,  424,  463,  463,
      463,  132,  463,  463,  133,  463,  395,  132,  463,  463,
      133,  430,  463,  463,  131,  131,  131,  425,  131,  131,
      131,  463,  463,  131,  131,  131,  463,  132,  431,  395,
      133,  132,  463,  463,  133,  430,  132,  463,  463,  133,
      463,  463,  463,  463,  463,  463,  463,  463,  435,  463,
      463,  431,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  435,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  134,  134,  463,  463,  463,  463,  134,  134,
      134,  147,  147,  463,  147,  150,  150,  463,  150,  152,
      463,  152,  161,  463,  161,  463,  161,  170,  170,  463,
      170,  463,  463,  170,  463,  170,  174,  174,  463,  463,
      463,  174,  174,  463,  174,  180,  180,  463,  463,  463,
      180,  180,  463,  180,  184,  184,  463,  463,  184,  463,
      184,  463,  184,  188,  188,  463,  463,  188,  463,  188,
      463,  188,  191,  191,  463,  463,  463,  463,  191,  463,
      191,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  132,  132,  463,  463,  463,  463,  132,  132,  132,
      146,  146,  463,  146,  149,  149,  463,  149,  151,  463,
      151,  160,  463,  160,  463,  160,  169,  169,  463,  169,
      463,  463,  169,  463,  169,  236,  236,  463,  463,  463,
      463,  463,  463,  236,  173,  173,  463,  463,  463,  173,
      173,  463,  173,  240,  240,  463,  463,  463,  463,  463,
      463,  240,  179,  179,  463,  463,  463,  179,  179,  463,
      179,  183,  183,  463,  463,  183,  463,  183,  463,  183,

      187,  187,  463,  463,  187,  463,  187,  463,  187,  190,
      190,  463,  463,  463,  463,  190,  463,  190,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  206,  206,
      463,  206,  206,  206,  206,  206,  206,  206,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  134,  134,
      463,  463,  463,  463,  134,  134,  134,  293,  293,  293,
      463,  463,  463,  293,  293,  293,  300,  300,  300,  463,
      463,  463,  300,  300,  300,  304,  304,  463,  463,  463,
      463,  304,  463,  304,  291,  291,  291,  463,  463,  463,
      291,  291,  291,  298,  298,  298,  463,  463,  463,  298,
      298,  298,  344,  344,  463,  463,  463,  463,  463,  463,
      344,  345,  345,  463,  463,  463,  463,  345,  463,  345,
      349,  349,  463,  463,  463,  463,  349,  463,  349,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  376,
      376,  463,  463,  463,  463,  463,  463,  376,  393,  463,
      393,  394,  394,  463,  463,  463,  463,  394,  463,  394,
      348,  348,  463,  463,  463,  463,  348,  463,  348,  407,
      407,  407,  463,  463,  463,  407,  463,  407,  392,  463,
      392,  406,  406,  406,  463,  463,  463,  406,  463,  406,
       69,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463
    } ;

static yyconst flex_int16_t yy_chk[2627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   15,   16,   43,
       44,    3,    4,   41,   41,   41,   59,   60,   41,   15,
       16,   42,   42,   42,   77,   76,   42,   76,   92,   77,
       92,   15,   16,   43,   44,   94,  128,   94,  128,  461,

       59,   60,   15,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   65,   65,   65,  460,   65,   66,
       66,   66,   89,   66,   90,   91,   65,   93,   67,   67,
       67,   66,   67,   98,  101,   17,   17,   17,  459,  120,
       67,   68,   68,   68,  120,   68,   89,  123,   90,   91,
      105,   93,  123,   68,  105,  458,   98,  101,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   78,
       78,   78,   99,  100,  126,  102,  107,  107,  107,  117,

      144,  107,   78,  126,  143,   78,  457,   80,   80,   80,
       18,   18,   18,   83,   83,   83,   99,  100,  102,  147,
       80,  147,  117,   80,  144,  456,   83,  143,  455,   83,
       80,  145,   83,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   80,  145,   83,  108,  108,  108,
      109,  150,  109,  150,  148,   82,   82,   82,  153,  154,
      156,   81,   81,   81,  198,   19,   19,   19,   82,  158,
      198,   82,  454,  109,   81,  109,  158,   81,  148,  453,
      452,  153,  161,  154,  156,   81,  161,   82,   19,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   81,
       82,  110,  110,  110,  111,  111,  111,  110,  451,  155,
      157,  162,  162,  162,  110,  111,  162,  111,  165,  450,
       20,   20,   20,  113,  113,  113,  114,  114,  114,  115,
      115,  115,  155,  157,  113,  114,  113,  449,  115,  114,
      448,  165,  115,   20,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  118,  118,  118,  166,  118,  121,
      121,  121,  447,  121,  204,  193,  118,  131,  131,  131,

      204,  121,  132,  132,  132,   23,   23,   23,  163,  163,
      163,  166,  446,  131,  164,  164,  164,  445,  132,  193,
      444,  133,  133,  133,  168,  168,  168,  443,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   79,
       79,   79,  133,  222,  208,  112,  112,  112,  167,  167,
      167,  251,   79,  208,  167,   79,  112,  251,  112,  442,
       24,   24,   24,  230,  197,  133,  222,  197,   79,  116,
      116,  116,  230,   79,  112,  197,  112,  441,  214,  171,
      171,  171,  116,   24,   27,   27,   27,  134,  134,  134,

      171,   79,  440,   27,  223,   27,   79,  112,  221,  112,
      134,  116,  214,  134,  224,  169,  169,  169,   27,   27,
       27,  169,  439,  138,  138,  138,   27,  223,   27,   28,
       28,   28,  221,  227,  116,  225,  138,  224,   28,  138,
       28,  436,  434,  135,  135,  135,  172,  172,  172,  173,
      173,  173,  433,   28,   28,   28,  135,  227,  225,  135,
      173,   28,  135,   28,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,  432,  228,  135,  170,  170,  170,
      177,  177,  177,  170,  178,  178,  178,  174,  174,  174,

      170,  177,  136,  136,  136,   35,   35,   35,  174,  228,
      174,  137,  137,  137,  426,  136,  252,  262,  136,  182,
      182,  182,  252,  262,  137,  136,  410,  137,   35,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,  136,
      137,  179,  179,  179,  402,  400,  175,  175,  175,  181,
      181,  181,  179,  180,  180,  180,  229,  175,  181,  175,
       36,   36,   36,  137,  180,  393,  180,  183,  183,  183,
      185,  185,  185,  186,  186,  186,  183,  391,  390,  185,
      229,  175,  380,   36,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  175,  184,  184,  184,  187,  187,
      187,  188,  188,  188,  184,  344,  327,  187,  184,  199,
      188,  232,  199,  226,  188,   45,   45,   45,  285,  263,
      199,  317,  194,  194,  194,  263,  194,  285,  189,  189,
      189,  190,  190,  190,  194,  232,  226,  233,   45,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,  203,
      189,  233,  203,  190,  200,  200,  200,  310,  200,  361,
      203,  213,  213,  213,  205,  361,  200,  205,  372,  299,

       46,   46,   46,  189,  372,  205,  190,  234,  234,  234,
      235,  235,  235,  239,  239,  239,  241,  241,  241,  242,
      242,  242,  213,   46,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  275,  213,  243,  231,   49,  246,
      247,  248,  277,  247,  248,  191,  191,  191,  236,  236,
      236,  247,  248,  236,  220,   49,   49,   49,  191,  211,
      243,  236,   49,  246,  236,  249,  277,  209,  249,  290,
      290,  290,  301,  301,  301,  290,  249,  191,   49,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,  250,
      191,  253,  250,   50,  202,  254,  201,  253,  254,  269,
      250,  278,  253,  196,  279,  195,  254,  237,  237,  237,
       50,   50,   50,  216,  216,  216,  255,   50,  237,  255,
      237,  160,  269,  159,  152,  278,  216,  255,  279,  216,
      237,  280,  216,   50,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,  237,  280,  216,  240,  240,  240,
      256,  257,  240,  256,  257,  283,  141,  284,  130,  127,
      240,  256,  257,  240,  125,   51,   51,   51,  217,  217,

      217,  258,  259,  124,  258,  259,  321,  321,  321,  283,
      284,  217,  258,  259,  217,  122,  119,  217,   51,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,  260,
      261,  217,  260,  261,  265,  266,  264,  265,  266,  288,
      260,  261,  264,  104,   96,  265,  266,  264,  306,   87,
       52,   52,   52,  218,  218,  218,  267,  268,   84,  267,
      268,   74,   73,  288,   72,   71,  218,  267,  268,  218,
      331,  306,  218,   52,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,  331,   69,  218,  289,  289,  289,
      307,  308,  289,  307,  308,  291,  291,  291,   38,   37,
      291,  307,  308,  289,   32,   53,   53,   53,  219,  219,
      219,  291,  292,  292,  292,   31,  297,  297,  297,   30,
       29,  219,  297,  292,  219,   26,  329,  219,   53,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  329,
       25,  219,   22,  293,  293,  293,  312,   21,  293,  312,
      245,  245,  245,  238,  238,  238,  293,  312,    0,  293,
       54,   54,   54,  245,  238,  309,  238,  316,  294,  294,

      294,  309,    0,  316,    0,    0,  309,    0,  316,  294,
      238,  294,  245,   54,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  238,  245,  296,  296,  296,    0,
        0,  296,  298,  298,  298,  330,  383,  298,  300,  300,
      300,  313,  296,  300,  313,   55,   55,   55,  298,    0,
        0,  300,  313,  314,  300,    0,  314,    0,  330,  383,
      303,  303,  303,    0,  314,  244,  244,  244,   55,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  244,

        0,    0,  303,  311,  311,  311,  315,  244,  332,  315,
      311,  272,  272,  272,  333,  311,    0,  315,  384,    0,
       56,   56,   56,  244,  272,  303,  319,  272,  320,  319,
      244,  320,  332,    0,  335,  335,  335,  319,  333,  320,
      335,  384,  272,   56,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  352,  272,  399,  381,  318,  318,
      318,  343,  343,  343,    0,  318,    0,  273,  273,  273,
      318,  322,  322,  322,    0,   57,   57,   57,  352,  399,
      273,  381,  353,  273,  322,  353,  347,  322,  340,  340,

      340,    0,    0,  353,  340,    0,  273,  347,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,  273,
        0,  347,  139,  139,  139,    0,  176,  176,  176,    0,
        0,  140,  140,  140,    0,  139,    0,  176,  139,  176,
       58,   58,   58,  139,  140,    0,  382,  140,  176,  192,
      192,  192,  358,  358,  358,  215,  215,  215,  337,  337,
      337,    0,  192,   58,  358,  140,    0,  139,  215,  337,
      382,  215,  176,  192,    0,    0,  270,  270,  270,  385,
        0,  192,  271,  271,  271,  360,  360,  360,  140,  270,

      215,  354,  270,  411,  354,  271,    0,  192,  271,  274,
      274,  274,  354,  385,  192,    0,  295,  295,  295,  412,
        0,  270,  274,  215,  421,  274,  411,  295,  271,  295,
      339,  339,  339,  302,  302,  302,  304,  304,  304,  274,
      295,  339,  412,  339,  270,    0,  302,  421,    0,  304,
        0,  271,  427,  305,  305,  305,  323,  323,  323,  338,
      338,  338,  274,  428,  295,  302,  305,  355,  304,  323,
      355,    0,  323,  324,  324,  324,  427,  305,  355,  323,
      325,  325,  325,  338,    0,  305,  324,  428,  302,  324,
        0,  304,    0,  325,    0,  338,  325,    0,  326,  326,

      326,  305,    0,  323,  342,  342,  342,  338,  305,  356,
      324,  326,  356,    0,  326,  348,  348,  348,  338,    0,
      356,  326,  345,  345,  345,  346,  346,  346,  342,  349,
      349,  349,    0,  324,    0,  345,    0,  401,  346,    0,
      342,    0,  349,  401,  403,  326,    0,  348,  401,  346,
      403,    0,  342,  362,  345,  403,  362,  346,  350,  350,
      350,  349,    0,  342,  362,  351,  351,  351,    0,    0,
      348,  350,    0,  346,  357,  357,  357,  345,  351,    0,
      346,  357,  350,    0,  349,    0,  357,  359,  359,  359,
      350,    0,  363,  364,  359,  363,  364,  351,  365,  366,

        0,  365,  366,  363,  364,  367,  350,    0,  367,  365,
      366,    0,    0,  350,    0,    0,  367,  368,  368,  368,
      351,  369,  369,  369,  368,  370,  370,  370,  373,  368,
        0,  373,  370,  369,  371,  371,  371,  374,    0,  373,
      374,  375,  375,  375,  376,  376,  376,    0,  374,  376,
      377,  377,  377,    0,  378,  378,  378,  376,  379,  379,
      379,    0,    0,  377,    0,    0,  377,  378,    0,    0,
      378,  379,    0,    0,  379,  386,  386,  386,  387,  387,
      387,  388,  388,  388,  378,  389,  389,  389,    0,  387,
        0,    0,  388,    0,  379,  394,  394,  394,    0,  386,

      395,  395,  395,  396,  396,  396,    0,  378,  394,  389,
        0,  386,    0,  395,    0,    0,  396,  379,  397,  397,
      397,  389,    0,  386,  395,    0,    0,  394,  398,  398,
      398,  397,  395,  389,  386,  396,  404,  404,  404,    0,
        0,  404,    0,    0,  389,  405,  405,  405,  395,    0,
      394,  405,  398,    0,    0,  395,    0,    0,  396,    0,
      398,  406,  406,  406,    0,    0,  406,  407,  407,  407,
        0,    0,  407,  408,  408,  408,  398,  416,  416,  416,
      407,    0,    0,  398,    0,    0,  408,    0,  416,  408,
      409,  409,  409,  408,  420,  420,  420,    0,  422,  422,

      422,    0,    0,  409,  422,    0,  409,  420,  424,  424,
      424,    0,    0,  409,  425,  425,  425,  408,    0,    0,
        0,  424,    0,    0,  424,    0,  420,  425,    0,    0,
      425,  424,    0,    0,  430,  430,  430,  409,  431,  431,
      431,    0,    0,  435,  435,  435,    0,  430,  425,  420,
      430,  431,    0,    0,  431,  424,  435,    0,    0,  435,
        0,    0,    0,    0,    0,    0,    0,    0,  430,    0,
        0,  425,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  430,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  476,  476,    0,    0,    0,    0,  476,  476,
      476,  477,  477,    0,  477,  478,  478,    0,  478,  479,
        0,  479,  480,    0,  480,    0,  480,  481,  481,    0,
      481,    0,    0,  481,    0,  481,  482,  482,    0,    0,
        0,  482,  482,    0,  482,  483,  483,    0,    0,    0,
      483,  483,    0,  483,  484,  484,    0,    0,  484,    0,
      484,    0,  484,  485,  485,    0,    0,  485,    0,  485,
        0,  485,  486,  486,    0,    0,    0,    0,  486,    0,
      486,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,    0,    0,    0,    0,  490,  490,  490,
      491,  491,    0,  491,  492,  492,    0,  492,  493,    0,
      493,  494,    0,  494,    0,  494,  495,  495,    0,  495,
        0,    0,  495,    0,  495,  496,  496,    0,    0,    0,
        0,    0,    0,  496,  497,  497,    0,    0,    0,  497,
      497,    0,  497,  498,  498,    0,    0,    0,    0,    0,
        0,  498,  499,  499,    0,    0,    0,  499,  499,    0,
      499,  500,  500,    0,    0,  500,    0,  500,    0,  500,

      501,  501,    0,    0,  501,    0,  501,    0,  501,  502,
      502,    0,    0,    0,    0,  502,    0,  502,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  509,  509,
        0,  509,  509,  509,  509,  509,  509,  509,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  512,  512,
        0,    0,    0,    0,  512,  512,  512,  513,  513,  513,
        0,    0,    0,  513,  513,  513,  514,  514,  514,    0,
        0,    0,  514,  514,  514,  515,  515,    0,    0,    0,
        0,  515,    0,  515,  516,  516,  516,    0,    0,    0,
      516,  516,  516,  517,  517,  517,    0,    0,    0,  517,
      517,  517,  518,  518,    0,    0,    0,    0,    0,    0,
      518,  519,  519,    0,    0,    0,    0,  519,    0,  519,
      520,  520,    0,    0,    0,    0,  520,    0,  520,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  523,
      523,    0,    0,    0,    0,    0,    0,  523,  524,    0,
      524,  525,  525,    0,    0,    0,    0,  525,    0,  525,
      526,  526,    0,    0,    0,    0,  526,    0,  526,  527,
      527,  527,    0,    0,    0,  527,    0,  527,  528,    0,
      528,  529,  529,  529,    0,    0,    0,  529,    0,  529,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/jens/Projekte/calcparser/p1.lpp"
#line 2 "/home/jens/Projekte/calcparser/p1.lpp"
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <limits.h>
#include <sys/types.h>

#include <QMessageBox>
#include <QStack>
#include <QDebug>

#include "calcparser_global.h"
#include "solverclass.h"

#define YYDEBUG 1

#include "p1.tab.hh"

struct calc_struct {
    QChar op;
    QString val;
};

struct calc_struct *  calcStruct;
QStack<calc_struct *> calc_stack;

enum {
    T_NUMBER = 4,
    T_EQUAL = 5,
};

/**
 * Forward declerations
 **/
void Number ();
void HexaNumber ();

void add_op2stack(QChar op);
void add_num2stack(QString);

void get_stackResult(void);

extern int yyerror(const char*);
int line_no = 1;

QChar opstr;
QString tmp_val;













#line 1269 "/home/jens/Projekte/calcparser/p1.cc"

#define INITIAL 0
#define COMMENTS 1
#define NUM 2
#define OPADD 3
#define OPSUB 4
#define OPDIV 5
#define OPMOD 6
#define CREATE_CMD 7
#define CREATE_FILE 8
#define CREATE_TABLE 9
#define NEW_TABLE_STRUCT 10
#define TABLE_STRUCT_BEG 11
#define TABLE_STRUCT_END 12
#define DATA_TYPE 13
#define PRIMARY_KEY 14
#define DATA_LENBEG 15
#define DATA_LENEND 16
#define PRIKEYS_BEG 17
#define PRIKEYS_END 18
#define FILENAME 19
#define IF_CMD 20
#define IF_CMD_END 21
#define IFCONDS 22
#define IF_COND_END 23
#define IF_BODY_BEG 24
#define IF_ELSE_BODY_BEG 25
#define PARAMETER_CMD 26
#define LOCAL_CMD 27
#define CLASS_CMD 28
#define CLASS_BODY 29
#define NUM_T2 30
#define NUM_OPERS 31
#define NUM_OPERS_COMMS1 32
#define NUM_OPERS_COMMS2 33

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 76 "/home/jens/Projekte/calcparser/p1.lpp"


#line 1492 "/home/jens/Projekte/calcparser/p1.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 464 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2561 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 78 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 79 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 82 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 84 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 85 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 87 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(COMMENTS); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 88 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 89 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 90 "/home/jens/Projekte/calcparser/p1.lpp"
;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("condition\n");     BEGIN(IF_CMD);        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("class beg\n");     BEGIN(CLASS_CMD);     }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("cmd: create\n");   BEGIN(CREATE_CMD);    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("ein parameter\n"); BEGIN(PARAMETER_CMD); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("ein local\n");     BEGIN(LOCAL_CMD);     }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "/home/jens/Projekte/calcparser/p1.lpp"
{ return FILENAME; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 100 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("lokslers\n");
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 104 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(IFCONDS); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 105 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("clasna1: -> %s\n",txt);
    free(txt);
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 112 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("varsi function hc\n");
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 116 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("caller function hc\n");
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("an elser\n"); BEGIN(IF_ELSE_BODY_BEG);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 123 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("body else is false\n");
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 126 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("body else is true\n");
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 129 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("function else hc\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 133 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("if ends\n"); BEGIN(INITIAL); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 135 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("clasna1: -> %s\n",txt);
    free(txt);
    BEGIN(CLASS_BODY);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("class end\n"); BEGIN(INITIAL); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 144 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("loca2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 151 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("loca1: -> %s\n",txt);
    free(txt);
    BEGIN(LOCAL_CMD);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 159 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("para2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 166 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("para1: -> %s\n",txt);
    free(txt);
    BEGIN(PARAMETER_CMD);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("new: file  \n"); BEGIN(CREATE_FILE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 176 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("new: table \n"); BEGIN(CREATE_TABLE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 178 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("wwwmos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("filserl1: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 186 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("ccmos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("filserl2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 195 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("fos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("tabsel1: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 203 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("mos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("tabsel2: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 212 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("beg\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 217 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    if (strcmp(txt,"primary") == 0) {
        printf("a key\n");
        BEGIN(PRIMARY_KEY);
    }
    else {
        printf("ident: %s\n",yytext);
        BEGIN(DATA_TYPE);
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 229 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("table struct ok.\n"); BEGIN(INITIAL); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 231 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf(" a key is given...\n");
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("1prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_END);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 242 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("2prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 249 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("tabselle has prikeys.\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 254 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" B, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 255 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" L, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 256 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" N, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 257 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" C, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 258 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" D, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 260 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("1>numser: %s\n",txt);
    free(txt);
    BEGIN(TABLE_STRUCT_END);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 267 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("2>numser: %s\n",txt);
    free(txt);
    printf("nax\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 276 "/home/jens/Projekte/calcparser/p1.lpp"
{
    add_num2stack(yytext);
    add_op2stack(opstr);
    BEGIN(INITIAL);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 282 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(NUM_OPERS); BEGIN(NUM_OPERS_COMMS2); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 283 "/home/jens/Projekte/calcparser/p1.lpp"
{ }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 286 "/home/jens/Projekte/calcparser/p1.lpp"
{ HexaNumber(); return T_NUMBER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 288 "/home/jens/Projekte/calcparser/p1.lpp"
{
    opstr = yytext[0];
    qDebug() << "op: " << yytext;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 293 "/home/jens/Projekte/calcparser/p1.lpp"
{ }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 294 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTS):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(OPADD):
case YY_STATE_EOF(OPSUB):
case YY_STATE_EOF(OPDIV):
case YY_STATE_EOF(OPMOD):
case YY_STATE_EOF(CREATE_CMD):
case YY_STATE_EOF(CREATE_FILE):
case YY_STATE_EOF(CREATE_TABLE):
case YY_STATE_EOF(NEW_TABLE_STRUCT):
case YY_STATE_EOF(TABLE_STRUCT_BEG):
case YY_STATE_EOF(TABLE_STRUCT_END):
case YY_STATE_EOF(DATA_TYPE):
case YY_STATE_EOF(PRIMARY_KEY):
case YY_STATE_EOF(DATA_LENBEG):
case YY_STATE_EOF(DATA_LENEND):
case YY_STATE_EOF(PRIKEYS_BEG):
case YY_STATE_EOF(PRIKEYS_END):
case YY_STATE_EOF(FILENAME):
case YY_STATE_EOF(IF_CMD):
case YY_STATE_EOF(IF_CMD_END):
case YY_STATE_EOF(IFCONDS):
case YY_STATE_EOF(IF_COND_END):
case YY_STATE_EOF(IF_BODY_BEG):
case YY_STATE_EOF(IF_ELSE_BODY_BEG):
case YY_STATE_EOF(PARAMETER_CMD):
case YY_STATE_EOF(LOCAL_CMD):
case YY_STATE_EOF(CLASS_CMD):
case YY_STATE_EOF(CLASS_BODY):
case YY_STATE_EOF(NUM_T2):
case YY_STATE_EOF(NUM_OPERS):
case YY_STATE_EOF(NUM_OPERS_COMMS1):
case YY_STATE_EOF(NUM_OPERS_COMMS2):
#line 296 "/home/jens/Projekte/calcparser/p1.lpp"
{ return 0; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 297 "/home/jens/Projekte/calcparser/p1.lpp"
;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 298 "/home/jens/Projekte/calcparser/p1.lpp"
ECHO;
	YY_BREAK
#line 2070 "/home/jens/Projekte/calcparser/p1.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 464 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 464 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 463);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 298 "/home/jens/Projekte/calcparser/p1.lpp"



void Number () {
    yylval.val = atol(yytext);
}

void HexaNumber () {
    yylval.val = (unsigned int) strtol(yytext, (char **)NULL, 16);
}

void add_op2stack(QChar op)
{
    calc_struct * cs = new calc_struct;
    cs->op = op;
    cs->val = "0";
    calc_stack.push(cs);
}

void add_num2stack(QString val)
{
    calc_struct *cs = new calc_struct;
    cs->op = '#';
    cs->val = val;
    calc_stack.push(cs);
}

void get_stackResult(void)
{
    struct calc_struct *cs[5];
    
    cs[0] = new calc_struct;
    cs[1] = new calc_struct;
    cs[2] = new calc_struct;
    cs[3] = new calc_struct;
    cs[4] = new calc_struct;
    
    int co = 0;
    while (!calc_stack.isEmpty()) {
        cs[0] = calc_stack.pop();
        
        if (cs[0]->op == QChar('*'))
        {
            cs[1] = calc_stack.pop();
            cs[2] = calc_stack.pop();
            qDebug() << "moler L: "
            << cs[1]->val << " R: "
            << cs[2]->val ;
        }
        else if (cs[0]->op == QChar('+')) {
            cs[1] = calc_stack.pop();
            qDebug() << "plusr L: "
            << cs[1]->val;
            
            if (co == 0) {
                cs[3]->val = cs[1]->val;
                cs[3]->op  = '+';
                ++co;
            }
            else if (co == 1) {
                cs[4]->val = cs[1]->val;
                cs[4]->op  = '+';
                
                qDebug() << "1A: " << " f: " << cs[3]->op << " num: " << cs[3]->val;
                qDebug() << "1B: " << " f: " << cs[4]->op << " num: " << cs[4]->val;
                
                co = 0;
                
                // get into calc...
                SolverClass solver(
                cs[3]->val, cs[3]->op,
                cs[4]->val, cs[4]->op, 255,
                //
                solver_enum::solve_add);
            }
        }
        else if (cs[0]->op == QChar('-')) {
            cs[1] = calc_stack.pop();
            qDebug() << "minur L: "
            << cs[1]->val;
            
            if (co == 0) {
                cs[3]->val = cs[1]->val;
                cs[3]->op  = '-';
                ++co;
            }
            else if (co == 1) {
                cs[4]->val = cs[1]->val;
                cs[4]->op  = '-';
                
                qDebug() << "2A: " << " f: " << cs[3]->op << " num: " << cs[3]->val;
                qDebug() << "2B: " << " f: " << cs[4]->op << " num: " << cs[4]->val;
                co = 0;
                
                // get into calc...
                
                /*SolverClass solver(
                    cs[3]->val
                    cs[4]->val,'-')*/
            }
        }
        else if (cs[0]->op == QChar('/')) {
            cs[1] = calc_stack.pop();
            qDebug() << "divsr L: "
            << cs[1]->val;
        }
    }
}

