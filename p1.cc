#line 2 "/home/jens/Projekte/calcparser/p1.cc"

#line 4 "/home/jens/Projekte/calcparser/p1.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[388] =
    {   0,
       61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   65,   63,   61,   62,   63,   63,
       63,   54,   63,   63,   63,   63,   63,   63,   63,   10,
        9,   10,   64,   64,   64,   64,   37,   64,   39,   40,
       41,   42,   47,   50,   51,   48,   49,   43,   64,   44,

       46,   64,   18,   64,   64,   64,   64,   64,   32,   30,
       64,   64,   64,   59,   57,   55,   56,   58,   61,   62,
        3,    4,    7,    1,   54,   54,    0,    0,    0,    0,
        0,    0,    0,   11,    0,    0,    0,    8,    0,    0,
        0,   37,   37,    0,   39,   39,   41,   41,    0,    0,
        0,    0,    0,    0,   45,   44,   44,    0,   18,   18,
        0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,   32,   32,
        0,   31,   30,   30,    0,    0,    0,    0,    0,    0,
       59,    3,    5,    3,    4,    6,    1,    2,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   45,    0,    0,   19,
        0,    0,    0,    0,    0,    0,   33,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,    0,   47,   50,   51,    0,    0,    0,   53,
       23,    0,    0,    0,    0,    0,    0,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,   28,    0,
        0,   12,    0,    0,   15,    0,    0,   35,    0,    0,
        0,    0,    0,   27,    0,   21,    0,    0,   22,    0,
       26,    0,    0,   28,   28,   28,   28,   28,   28,   28,

       28,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   47,   48,   49,    0,
       20,   24,   25,   28,    0,    0,   17,    0,    0,    0,
        0,    0,   29,    0,   14,    0,    0,    0,   60,    0,
       36,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    1,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   30,   31,   32,   33,   34,   35,
       30,   36,   37,   38,   39,   30,   40,   41,   30,   30,
       42,    1,   43,   44,   30,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   30,   30,   54,   55,   56,
       57,   58,   30,   59,   60,   61,   62,   30,   63,   64,
       30,   30,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    2,    2,    1,    1,    3,    4,    1,    1,
        5,    1,    6,    1,    7,    1,    1,    8,    1,    1,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    1,    1,    1,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    1
    } ;

static yyconst flex_int16_t yy_base[442] =
    {   0,
        0,    0,   63,   64,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   43,  104,  169,  234,  299,
      939,  923,  364,  429,  916,  912,  473,  508,  908,  906,
      905,  880,    0,    0,  564,  629,  876,  874,    0,    0,
       72,   80,   45,   46,  694,  759,    0,    0,  824,  889,
      954, 1019, 1084, 1149, 1214, 1279, 1344, 1409,   52,   53,
      123,  126,   76,  122,  870, 2253,  852,  849,  844,  836,
       82,  140,  147,  448,  206,  270,  199,  277,  812, 2253,
     2253,  804, 2253,  104,  114,  111,   84,  113,   85, 2253,
      794, 2253,  111,  112,  145,  158,  154, 2253,  793,  141,

     2253,  192,  202,  228,  260,  321,  454,  324,  329,  343,
      478,  164,  346,  773, 2253, 2253, 2253, 2253,  785,  755,
      155,  753, 2253,  752,  223,  383,  386,  391,  420,  397,
      542,  601,  610,  496, 1431, 1440,  717, 2253,  169,  176,
      236,    0,  215,  237,    0,  245,    0,  714,  236,  246,
      233,  270,  297,  145,  691,  675,  272,  353,  414,  417,
      293,  311,  457,  423,  514,  534,  488,  521,  548,  586,
      655, 1435,  589,  592,  607,  650,  658,  619,  673,  676,
      679,  714,  717,  720,  723,  747,  854, 1458,  314,  730,
      670,  664, 2253,  393,  653, 2253,  652, 2253,  750,  429,

     1464,  932,  997, 1062, 1127,  618,  437,  360,  472,  474,
      635,  746,  439,  460,  484,  400,  616,  509,  571,  737,
      740,  782,  861, 1182,  744,  792,  788,  809,  638, 1274,
     1179,  770,  758, 1485, 1491, 1310, 1376, 1508,  603, 2253,
      797,  798,  823,  826, 2253, 2253,  830,  819,  466, 2253,
     2253,  833,  919,  812,  976,  858,  988,  914, 1055, 1042,
      877, 1049,  602, 1106,  937, 1515,  983, 1531, 1535,  888,
      941, 1172, 1552, 1556, 1235, 1578,  590, 2253,  892,  895,
      931,  960,  955, 2253, 1070, 2253, 1112, 1587, 1131, 1115,
     2253, 1595, 1007,  582, 1602, 1605, 1056, 1206, 1608, 1626,

     1664,  968, 1134, 1197, 1244, 1667, 1671,  566, 1034, 1126,
      960, 1089, 1155, 1688, 1239, 1262, 1691,  572,  546,    0,
      538, 1700, 1709, 1703, 1300, 1494, 1136, 1265, 1303, 1330,
     1366, 1743, 1752,  541, 1148, 1219, 2253, 2253, 2253, 1314,
     2253, 2253, 2253, 1760, 1282, 1381, 2253, 1770, 1778,  527,
     1224, 1316, 2253, 1788, 1795,  527,  521,  496, 1805,  478,
     2253, 2253,  410,  467,  457,  445,  408,  405,  403,  383,
      381,  385,  350,  309,  242,  256,  214,  223,  224,  211,
      153,  202,  183,  146,   69, 2253, 2253, 1847, 1856, 1865,
     1874, 1883, 1892, 1901, 1910, 1919, 1928, 1937, 1946, 1954,

     1958, 1962, 1965, 1970, 1978, 1986, 1994, 2002, 2010, 2018,
     2027, 2036, 2045, 2053, 2057, 2061, 2064, 2069, 2077, 2085,
     2093, 2101, 2109, 2117, 2125, 2133, 2141, 2149, 2157, 2165,
     2173, 2181, 2189, 2197, 2205, 2208, 2216, 2224, 2232, 2235,
     2243
    } ;

static yyconst flex_int16_t yy_def[442] =
    {   0,
      387,    1,  388,  388,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  390,  390,  391,  391,
      389,  389,  392,  392,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  393,  393,  389,  389,  389,  389,
      389,  389,  389,  389,  394,  394,  389,  389,  395,  395,
      396,  396,  397,  397,  398,  398,  399,  399,  389,  389,
      389,  389,  389,  389,  387,  387,  387,  387,  387,  387,
      387,  387,  400,  400,  400,  400,  400,  400,  387,  387,
      387,  387,  387,  387,  387,  387,  401,  387,  402,  387,
      403,  387,  387,  387,  387,  387,  387,  387,  387,  404,

      387,  387,  387,  387,  405,  406,  406,  407,  408,  409,
      410,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      411,  412,  387,  413,  387,  387,  387,  414,  387,  400,
      400,  400,  400,  400,  400,  400,  387,  387,  387,  387,
      387,  415,  401,  387,  416,  402,  417,  403,  387,  387,
      387,  387,  387,  387,  387,  418,  404,  387,  387,  387,
      387,  387,  387,  387,  419,  405,  387,  420,  421,  406,
      406,  406,  387,  422,  423,  407,  387,  387,  424,  408,
      387,  387,  425,  409,  387,  426,  410,  410,  387,  387,
      387,  411,  387,  411,  412,  387,  413,  387,  387,  387,

      400,  400,  400,  400,  400,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      420,  427,  406,  406,  422,  428,  387,  387,  387,  426,
      429,  387,  387,  400,  400,  400,  400,  400,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  430,  387,  427,  406,  406,  387,
      387,  431,  387,  428,  432,  433,  432,  434,  434,  387,
      435,  400,  400,  400,  400,  400,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  406,  387,
      387,  387,  432,  436,  437,  437,  436,  438,  434,  434,

      434,  387,  435,  439,  400,  400,  400,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  440,
      436,  437,  437,  437,  436,  438,  387,  387,  387,  441,
      439,  400,  400,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  437,  387,  387,  387,  400,  400,  387,
      387,  387,  387,  400,  400,  387,  387,  387,  400,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,    0,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387
    } ;

static yyconst flex_int16_t yy_nxt[2319] =
    {   0,
       66,   67,   68,   66,   66,   69,   66,   66,   70,   66,
       66,   66,   66,   71,   72,   66,   66,   66,   66,   66,
       73,   73,   74,   73,   73,   73,   73,   75,   76,   73,
       77,   73,   73,   73,   78,   73,   73,   73,   73,   73,
       73,   66,   66,   79,   73,   73,   74,   73,   73,   73,
       73,   75,   76,   77,   73,   73,   73,   78,   73,   73,
       73,   73,   73,   73,   66,   81,   81,   84,   84,  104,
      104,   82,   82,  102,  102,  102,  112,  112,  103,   85,
       85,  102,  102,  102,  115,  116,  103,  117,  386,  118,
      123,   84,   84,  104,  104,  124,  142,  145,  142,  145,

      112,  112,   85,   85,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       86,   83,   83,   83,  113,  113,  113,  113,  113,  113,
      115,  116,  139,  117,  140,  118,  141,  114,  144,  150,
      114,  125,  125,  125,  149,   83,   83,   83,  127,  127,
      127,  155,  216,  385,  126,  156,  139,  193,  140,  154,
      141,  128,  144,  150,  129,  151,  194,  149,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   86,   83,   83,   83,  151,
      384,  152,  153,  158,  158,  158,  189,  208,  159,  207,

      127,  127,  127,  160,  160,  160,  383,  127,  127,  127,
       83,   83,   83,  128,  152,  153,  129,  382,  381,  189,
      128,  208,  207,  129,  125,  125,  125,  142,  380,  142,
      133,  379,  135,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       88,   83,   83,   83,  133,  135,  378,  145,  161,  145,
      162,  163,  163,  163,  209,  210,  212,  164,  377,  211,
      213,  127,  127,  127,  165,   83,   83,   83,  127,  127,
      127,  161,  155,  162,  128,  376,  156,  129,  209,  210,
      212,  128,  211,  213,  129,  134,  214,  136,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   88,   83,   83,   83,  134,
      214,  136,  167,  167,  167,  173,  173,  173,  215,  218,
      177,  177,  177,  168,  219,  169,  174,  232,  175,  178,
       83,   83,   83,  179,  181,  181,  181,  190,  190,  190,
      375,  215,  218,  182,  158,  158,  158,  183,  219,  159,
      191,  232,  374,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  125,  125,  125,  127,  127,  127,
      241,  373,  127,  127,  127,  193,  372,  126,  127,  127,

      127,  249,  371,  129,  194,   83,   83,   83,  129,  370,
      250,  128,  369,  241,  129,  160,  160,  160,  160,  160,
      160,  199,  199,  199,  220,  220,  220,  368,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  127,
      127,  127,  200,  233,  367,  167,  167,  167,  163,  163,
      163,  240,  128,  246,  164,  129,  168,  249,  169,  366,
       83,   83,   83,  365,  364,  200,  250,  233,  131,  185,
      185,  185,  363,  132,  171,  240,  172,  246,  247,  167,
      167,  167,  186,   83,   93,   94,   95,  127,  127,  127,

      168,  131,  242,   96,  243,   97,  132,  171,  248,  172,
      128,  188,  247,  129,  362,  163,  163,  163,   93,   94,
       95,  164,  221,  221,  221,  242,   96,  243,   97,   93,
       94,   95,  248,  251,  188,  163,  163,  163,   96,  361,
       97,  164,  360,  127,  127,  127,  356,  350,  165,  167,
      167,  167,  320,   93,   94,   95,  128,  251,  343,  129,
      168,   96,  201,   97,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  342,  334,  201,  167,  167,  167,
      173,  173,  173,  225,  225,  225,  320,  308,  168,  252,

      169,  174,  127,  127,  127,   83,   83,   83,  173,  173,
      173,  127,  127,  127,  292,  128,  277,  217,  129,  174,
      227,  227,  227,  252,  128,  202,  239,  129,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  202,
      203,  173,  173,  173,  198,  196,  167,  167,  167,  177,
      177,  177,  174,  265,  175,  244,  387,  168,  178,  169,
       83,   83,   83,  203,  177,  177,  177,  177,  177,  177,
      181,  181,  181,  178,  191,  155,  178,  265,  244,  182,
      179,  223,  217,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  223,  228,  228,  228,  181,  181,
      181,  181,  181,  181,  185,  185,  185,  182,  147,  206,
      182,  190,  190,  190,  183,   83,   83,   83,  220,  220,
      220,  221,  221,  221,  191,  225,  225,  225,  185,  185,
      185,  199,  199,  199,  198,  196,  229,  120,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  229,
      230,  245,  200,  253,  253,  253,  119,  191,  254,  227,
      227,  227,  270,  260,  260,  260,  255,  271,  261,  256,

       83,   83,   83,  230,  245,  200,  262,  154,  147,  263,
      228,  228,  228,  285,  285,  285,  270,  138,  137,  286,
      271,  278,  279,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  122,  278,  279,  280,  107,  121,
      281,  120,  282,  119,  283,  185,  185,  185,  284,  287,
      287,  287,  167,  167,  167,   83,   83,   83,  186,  387,
      288,  280,  107,  168,  281,  169,  282,  283,  290,  290,
      290,  101,  284,  101,  291,  258,   99,  188,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,  258,
      188,   99,   98,  107,   98,  167,  167,  167,  302,   92,
      253,  253,  253,   92,  309,  254,  168,  310,  169,   90,
       83,   83,   83,  127,  127,  127,  256,  107,  293,  293,
      293,  302,  303,  303,  303,   90,  128,  309,  387,  129,
      310,  311,  235,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  387,  311,  235,  253,  253,  253,
      312,  387,  254,  313,  267,  267,  267,  387,  327,  253,
      253,  253,  337,  256,  254,   83,   83,   83,  127,  127,

      127,  387,  255,  387,  312,  256,  387,  313,  293,  293,
      293,  128,  327,  387,  129,  337,  297,  236,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  297,
      387,  236,  387,  260,  260,  260,  387,  387,  261,  387,
      260,  260,  260,  387,  335,  261,  167,  167,  167,  263,
       83,   83,   83,  127,  127,  127,  263,  168,  387,  169,
      320,  285,  285,  285,  387,  387,  128,  286,  335,  129,
      289,  325,  237,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,  289,  325,  237,  260,  260,  260,
      387,  387,  261,  287,  287,  287,  290,  290,  290,  338,
      262,  387,  291,  263,  288,   83,   83,   83,  127,  127,
      127,  387,  167,  167,  167,  303,  303,  303,  387,  387,
      387,  128,  338,  168,  129,  169,  336,  238,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  387,
      336,  238,  345,  127,  127,  127,  387,  339,  387,  351,
      267,  267,  267,  167,  167,  167,  128,  387,  387,  129,
       83,   83,   83,  186,  168,  345,  169,  387,  328,  328,

      328,  339,  351,  329,  387,  387,  387,  185,  185,  185,
      259,  330,  269,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  259,  269,  127,  127,  127,  326,
      340,  340,  340,  387,  387,  127,  127,  127,  357,  128,
      352,  341,  129,  387,  387,   83,   83,   83,  128,  387,
      387,  129,  326,  340,  340,  340,  328,  328,  328,  387,
      387,  329,  357,  352,  341,  185,  185,  185,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  266,

      387,  293,  293,  293,  346,  346,  346,  230,  387,  387,
      347,  127,  127,  127,  320,  340,  340,  340,  353,  387,
       83,   83,   83,  266,  128,  387,  341,  129,  387,  387,
      230,  328,  328,  328,  387,  387,  329,  387,  387,  387,
      358,  353,  274,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  358,  274,  387,  328,  328,  328,
      387,  387,  329,  387,  387,  387,  387,  127,  127,  127,
      330,  387,  346,  346,  346,   83,   83,   83,  347,  387,
      128,  387,  387,  129,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  275,  387,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  275,
      387,  387,  127,  127,  127,  387,  167,  167,  167,  387,
      387,  127,  127,  127,  387,  128,  387,  168,  129,  169,
       83,   83,   83,  204,  128,  387,  387,  129,  224,  185,
      185,  185,  387,  387,  387,  127,  127,  127,  387,  387,
      387,  387,  186,   83,  387,  205,  387,  204,  128,  387,
      387,  129,  224,  231,  387,  387,  127,  127,  127,  387,
      387,  188,  127,  127,  127,  185,  185,  185,  205,  128,

      234,  387,  129,  387,  387,  128,  387,  231,  129,  127,
      127,  127,  387,  387,  188,  387,  267,  267,  267,  344,
      387,  272,  128,  234,  387,  129,  387,  326,  273,  186,
      387,  387,  185,  185,  185,  387,  185,  185,  185,  276,
      387,  387,  387,  344,  272,  298,  387,  387,  296,  298,
      326,  273,  387,  127,  127,  127,  387,  127,  127,  127,
      301,  387,  276,  387,  300,  387,  128,  387,  300,  129,
      128,  296,  387,  129,  387,  387,  305,  387,  387,  127,
      127,  127,  387,  387,  301,  387,  387,  300,  314,  314,
      314,  300,  128,  387,  306,  129,  317,  317,  317,  387,

      305,  387,  307,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  315,  387,  387,  387,  298,  306,  387,  298,
      318,  387,  298,  387,  316,  387,  307,  185,  185,  185,
      324,  387,  319,  387,  387,  323,  315,  387,  323,  387,
      298,  300,  387,  387,  318,  387,  387,  316,  387,  387,
      387,  301,  387,  387,  324,  319,  387,  387,  323,  300,
      387,  323,  387,  387,  300,  267,  267,  267,  127,  127,
      127,  387,  127,  127,  127,  301,  387,  387,  298,  387,
      387,  128,  300,  387,  129,  128,  387,  387,  129,  314,
      314,  314,  317,  317,  317,  387,  387,  300,  332,  387,

      387,  185,  185,  185,  267,  267,  267,  387,  333,  387,
      185,  185,  185,  315,  298,  387,  318,  298,  387,  387,
      300,  332,  387,  298,  387,  316,  387,  387,  319,  387,
      387,  333,  387,  323,  324,  387,  323,  315,  387,  387,
      318,  387,  323,  387,  127,  127,  127,  387,  316,  387,
      387,  319,  387,  127,  127,  127,  323,  128,  324,  323,
      129,  267,  267,  267,  348,  323,  128,  387,  387,  129,
      387,  127,  127,  127,  298,  387,  349,  387,  387,  127,
      127,  127,  387,  387,  128,  387,  387,  129,  348,  127,
      127,  127,  128,  323,  354,  129,  127,  127,  127,  387,

      349,  387,  128,  387,  387,  129,  127,  127,  127,  128,
      387,  387,  129,  355,  387,  387,  323,  387,  354,  128,
      387,  387,  129,  359,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  355,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  359,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  130,  387,  387,  387,  387,
      130,  130,  130,  143,  143,  387,  143,  146,  146,  387,
      146,  148,  387,  148,  157,  387,  157,  387,  157,  166,
      387,  166,  387,  387,  166,  387,  166,  170,  387,  387,
      387,  170,  170,  387,  170,  176,  387,  387,  387,  176,

      176,  387,  176,  180,  387,  387,  180,  387,  180,  387,
      180,  184,  387,  387,  184,  387,  184,  387,  184,  187,
      387,  387,  387,  387,  187,  387,  187,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  128,  387,  387,  387,  387,  128,
      128,  128,  142,  142,  387,  142,  145,  145,  387,  145,
      147,  387,  147,  156,  387,  156,  387,  156,  165,  387,
      165,  387,  387,  165,  387,  165,  222,  387,  387,  387,
      387,  387,  387,  222,  169,  387,  387,  387,  169,  169,

      387,  169,  226,  387,  387,  387,  387,  387,  387,  226,
      175,  387,  387,  387,  175,  175,  387,  175,  179,  387,
      387,  179,  387,  179,  387,  179,  183,  387,  387,  183,
      387,  183,  387,  183,  186,  387,  387,  387,  387,  186,
      387,  186,  257,  257,  387,  387,  387,  257,  257,  257,
      264,  264,  387,  387,  387,  264,  264,  264,  268,  387,
      387,  387,  387,  268,  387,  268,  255,  255,  387,  387,
      387,  255,  255,  255,  262,  262,  387,  387,  387,  262,
      262,  262,  294,  387,  387,  387,  387,  387,  387,  294,
      295,  387,  387,  387,  387,  295,  387,  295,  299,  387,

      387,  387,  387,  299,  387,  299,  304,  387,  387,  387,
      387,  387,  387,  304,  321,  387,  321,  322,  387,  387,
      387,  387,  322,  387,  322,  298,  387,  387,  387,  387,
      298,  387,  298,  331,  331,  387,  387,  387,  331,  387,
      331,  320,  387,  320,  330,  330,  387,  387,  387,  330,
      387,  330,   65,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387
    } ;

static yyconst flex_int16_t yy_chk[2319] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   15,   16,   43,
       44,    3,    4,   41,   41,   41,   59,   60,   41,   15,
       16,   42,   42,   42,   63,   63,   42,   63,  385,   63,
       71,   15,   16,   43,   44,   71,   87,   89,   87,   89,

       59,   60,   15,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   61,   61,   61,   62,   62,   62,
       64,   64,   84,   64,   85,   64,   86,   61,   88,   94,
       62,   72,   72,   72,   93,   17,   17,   17,   73,   73,
       73,  100,  154,  384,   72,  100,   84,  121,   85,  154,
       86,   73,   88,   94,   73,   95,  121,   93,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   95,
      383,   96,   97,  102,  102,  102,  112,  140,  102,  139,

       77,   77,   77,  103,  103,  103,  382,   75,   75,   75,
       18,   18,   18,   77,   96,   97,   77,  381,  380,  112,
       75,  140,  139,   75,  125,  125,  125,  143,  379,  143,
       75,  378,   77,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   75,   77,  377,  146,  104,  146,
      104,  105,  105,  105,  141,  144,  150,  105,  376,  149,
      151,   76,   76,   76,  105,   19,   19,   19,   78,   78,
       78,  104,  157,  104,   76,  375,  157,   76,  141,  144,
      150,   78,  149,  151,   78,   76,  152,   78,   19,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   76,
      152,   78,  106,  106,  106,  108,  108,  108,  153,  161,
      109,  109,  109,  106,  162,  106,  108,  189,  108,  109,
       20,   20,   20,  109,  110,  110,  110,  113,  113,  113,
      374,  153,  161,  110,  158,  158,  158,  110,  162,  158,
      113,  189,  373,   20,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  126,  126,  126,  127,  127,  127,
      208,  372,  128,  128,  128,  194,  371,  126,  130,  130,

      130,  216,  370,  127,  194,   23,   23,   23,  128,  369,
      216,  130,  368,  208,  130,  159,  159,  159,  160,  160,
      160,  129,  129,  129,  164,  164,  164,  367,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   74,
       74,   74,  129,  200,  366,  107,  107,  107,  163,  163,
      163,  207,   74,  213,  163,   74,  107,  249,  107,  365,
       24,   24,   24,  364,  363,  129,  249,  200,   74,  111,
      111,  111,  360,   74,  107,  207,  107,  213,  214,  167,
      167,  167,  111,   24,   27,   27,   27,  134,  134,  134,

      167,   74,  209,   27,  210,   27,   74,  107,  215,  107,
      134,  111,  214,  134,  358,  165,  165,  165,   27,   27,
       27,  165,  168,  168,  168,  209,   27,  210,   27,   28,
       28,   28,  215,  218,  111,  166,  166,  166,   28,  357,
       28,  166,  356,  131,  131,  131,  350,  334,  166,  169,
      169,  169,  321,   28,   28,   28,  131,  218,  319,  131,
      169,   28,  131,   28,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,  318,  308,  131,  170,  170,  170,
      173,  173,  173,  174,  174,  174,  294,  277,  170,  219,

      170,  173,  132,  132,  132,   35,   35,   35,  175,  175,
      175,  133,  133,  133,  263,  132,  239,  217,  132,  175,
      178,  178,  178,  219,  133,  132,  206,  133,   35,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,  132,
      133,  176,  176,  176,  197,  195,  171,  171,  171,  177,
      177,  177,  176,  229,  176,  211,  192,  171,  177,  171,
       36,   36,   36,  133,  179,  179,  179,  180,  180,  180,
      181,  181,  181,  179,  191,  156,  180,  229,  211,  181,
      180,  171,  155,   36,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  171,  182,  182,  182,  183,  183,
      183,  184,  184,  184,  185,  185,  185,  183,  148,  137,
      184,  190,  190,  190,  184,   45,   45,   45,  220,  220,
      220,  221,  221,  221,  190,  225,  225,  225,  186,  186,
      186,  199,  199,  199,  124,  122,  185,  120,   45,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,  185,
      186,  212,  199,  222,  222,  222,  119,  114,  222,  227,
      227,  227,  232,  226,  226,  226,  222,  233,  226,  222,

       46,   46,   46,  186,  212,  199,  226,   99,   91,  226,
      228,  228,  228,  254,  254,  254,  232,   82,   79,  254,
      233,  241,  242,   46,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   70,  241,  242,  243,   49,   69,
      244,   68,  247,   67,  248,  187,  187,  187,  252,  256,
      256,  256,  223,  223,  223,   49,   49,   49,  187,   65,
      256,  243,   49,  223,  244,  223,  247,  248,  261,  261,
      261,   38,  252,   37,  261,  223,   32,  187,   49,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,  223,
      187,   31,   30,   50,   29,  258,  258,  258,  270,   26,
      253,  253,  253,   25,  279,  253,  258,  280,  258,   22,
       50,   50,   50,  202,  202,  202,  253,   50,  265,  265,
      265,  270,  271,  271,  271,   21,  202,  279,    0,  202,
      280,  281,  202,   50,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,    0,  281,  202,  255,  255,  255,
      282,    0,  255,  283,  267,  267,  267,    0,  302,  257,
      257,  257,  311,  255,  257,   51,   51,   51,  203,  203,

      203,    0,  257,    0,  282,  257,    0,  283,  293,  293,
      293,  203,  302,    0,  203,  311,  267,  203,   51,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,  267,
        0,  203,    0,  260,  260,  260,    0,    0,  260,    0,
      262,  262,  262,    0,  309,  262,  259,  259,  259,  260,
       52,   52,   52,  204,  204,  204,  262,  259,    0,  259,
      297,  285,  285,  285,    0,    0,  204,  285,  309,  204,
      259,  297,  204,   52,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,  259,  297,  204,  264,  264,  264,
        0,    0,  264,  287,  287,  287,  290,  290,  290,  312,
      264,    0,  290,  264,  287,   53,   53,   53,  205,  205,
      205,    0,  289,  289,  289,  303,  303,  303,    0,    0,
        0,  205,  312,  289,  205,  289,  310,  205,   53,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,    0,
      310,  205,  327,  272,  272,  272,    0,  313,    0,  335,
      231,  231,  231,  224,  224,  224,  272,    0,    0,  272,
       54,   54,   54,  231,  224,  327,  224,    0,  304,  304,

      304,  313,  335,  304,    0,    0,    0,  298,  298,  298,
      224,  304,  231,   54,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  224,  231,  275,  275,  275,  298,
      315,  315,  315,    0,    0,  305,  305,  305,  351,  275,
      336,  315,  275,    0,    0,   55,   55,   55,  305,    0,
        0,  305,  298,  316,  316,  316,  328,  328,  328,    0,
        0,  328,  351,  336,  316,  230,  230,  230,   55,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  230,

        0,  325,  325,  325,  329,  329,  329,  230,    0,    0,
      329,  236,  236,  236,  325,  340,  340,  340,  345,    0,
       56,   56,   56,  230,  236,    0,  340,  236,    0,    0,
      230,  330,  330,  330,    0,    0,  330,    0,    0,    0,
      352,  345,  236,   56,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  352,  236,    0,  331,  331,  331,
        0,    0,  331,    0,    0,    0,    0,  237,  237,  237,
      331,    0,  346,  346,  346,   57,   57,   57,  346,    0,
      237,    0,    0,  237,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  237,    0,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,  237,
        0,    0,  135,  135,  135,    0,  172,  172,  172,    0,
        0,  136,  136,  136,    0,  135,    0,  172,  135,  172,
       58,   58,   58,  135,  136,    0,    0,  136,  172,  188,
      188,  188,    0,    0,    0,  201,  201,  201,    0,    0,
        0,    0,  188,   58,    0,  136,    0,  135,  201,    0,
        0,  201,  172,  188,    0,    0,  234,  234,  234,    0,
        0,  188,  235,  235,  235,  326,  326,  326,  136,  234,

      201,    0,  234,    0,    0,  235,    0,  188,  235,  238,
      238,  238,    0,    0,  188,    0,  266,  266,  266,  326,
        0,  234,  238,  201,    0,  238,    0,  326,  235,  266,
        0,    0,  268,  268,  268,    0,  269,  269,  269,  238,
        0,    0,    0,  326,  234,  268,    0,    0,  266,  269,
      326,  235,    0,  273,  273,  273,    0,  274,  274,  274,
      269,    0,  238,    0,  268,    0,  273,    0,  269,  273,
      274,  266,    0,  274,    0,    0,  273,    0,    0,  276,
      276,  276,    0,    0,  269,    0,    0,  268,  288,  288,
      288,  269,  276,    0,  274,  276,  292,  292,  292,    0,

      273,    0,  276,  295,  295,  295,  296,  296,  296,  299,
      299,  299,  288,    0,    0,    0,  295,  274,    0,  296,
      292,    0,  299,    0,  288,    0,  276,  300,  300,  300,
      296,    0,  292,    0,    0,  295,  288,    0,  296,    0,
      300,  299,    0,    0,  292,    0,    0,  288,    0,    0,
        0,  300,    0,    0,  296,  292,    0,    0,  295,  300,
        0,  296,    0,    0,  299,  301,  301,  301,  306,  306,
      306,    0,  307,  307,  307,  300,    0,    0,  301,    0,
        0,  306,  300,    0,  306,  307,    0,    0,  307,  314,
      314,  314,  317,  317,  317,    0,    0,  301,  306,    0,

        0,  322,  322,  322,  324,  324,  324,    0,  307,    0,
      323,  323,  323,  314,  322,    0,  317,  324,    0,    0,
      301,  306,    0,  323,    0,  314,    0,    0,  317,    0,
        0,  307,    0,  322,  323,    0,  324,  314,    0,    0,
      317,    0,  323,    0,  332,  332,  332,    0,  314,    0,
        0,  317,    0,  333,  333,  333,  322,  332,  323,  324,
      332,  344,  344,  344,  332,  323,  333,    0,    0,  333,
        0,  348,  348,  348,  344,    0,  333,    0,    0,  349,
      349,  349,    0,    0,  348,    0,    0,  348,  332,  354,
      354,  354,  349,  344,  348,  349,  355,  355,  355,    0,

      333,    0,  354,    0,    0,  354,  359,  359,  359,  355,
        0,    0,  355,  349,    0,    0,  344,    0,  348,  359,
        0,    0,  359,  354,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  349,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  354,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  400,    0,    0,    0,    0,
      400,  400,  400,  401,  401,    0,  401,  402,  402,    0,
      402,  403,    0,  403,  404,    0,  404,    0,  404,  405,
        0,  405,    0,    0,  405,    0,  405,  406,    0,    0,
        0,  406,  406,    0,  406,  407,    0,    0,    0,  407,

      407,    0,  407,  408,    0,    0,  408,    0,  408,    0,
      408,  409,    0,    0,  409,    0,  409,    0,  409,  410,
        0,    0,    0,    0,  410,    0,  410,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  414,    0,    0,    0,    0,  414,
      414,  414,  415,  415,    0,  415,  416,  416,    0,  416,
      417,    0,  417,  418,    0,  418,    0,  418,  419,    0,
      419,    0,    0,  419,    0,  419,  420,    0,    0,    0,
        0,    0,    0,  420,  421,    0,    0,    0,  421,  421,

        0,  421,  422,    0,    0,    0,    0,    0,    0,  422,
      423,    0,    0,    0,  423,  423,    0,  423,  424,    0,
        0,  424,    0,  424,    0,  424,  425,    0,    0,  425,
        0,  425,    0,  425,  426,    0,    0,    0,    0,  426,
        0,  426,  427,  427,    0,    0,    0,  427,  427,  427,
      428,  428,    0,    0,    0,  428,  428,  428,  429,    0,
        0,    0,    0,  429,    0,  429,  430,  430,    0,    0,
        0,  430,  430,  430,  431,  431,    0,    0,    0,  431,
      431,  431,  432,    0,    0,    0,    0,    0,    0,  432,
      433,    0,    0,    0,    0,  433,    0,  433,  434,    0,

        0,    0,    0,  434,    0,  434,  435,    0,    0,    0,
        0,    0,    0,  435,  436,    0,  436,  437,    0,    0,
        0,    0,  437,    0,  437,  438,    0,    0,    0,    0,
      438,    0,  438,  439,  439,    0,    0,    0,  439,    0,
      439,  440,    0,  440,  441,  441,    0,    0,    0,  441,
        0,  441,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/jens/Projekte/calcparser/p1.lpp"
#line 2 "/home/jens/Projekte/calcparser/p1.lpp"
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <limits.h>
#include <sys/types.h>

#include <QMessageBox>
#include <QStack>
#include <QDebug>

#include "calcparser_global.h"

#define YYDEBUG 1

#include "p1.tab.hh"

struct calc_struct {
    QChar op;
    float val;
};

struct calc_struct *  calcStruct;
QStack<calc_struct *> calc_stack;

enum {
    T_NUMBER = 4,
    T_EQUAL = 5,
};

/**
 * Forward declerations
 **/
void Number ();
void HexaNumber ();

void add_op2stack(QChar op);
void add_num2stack(double val);

void get_stackResult(void);

extern int yyerror(const char*);
int line_no = 1;













#line 1170 "/home/jens/Projekte/calcparser/p1.cc"

#define INITIAL 0
#define COMMENTS 1
#define NUM 2
#define OPADD 3
#define OPSUB 4
#define OPDIV 5
#define OPMOD 6
#define CREATE_CMD 7
#define CREATE_FILE 8
#define CREATE_TABLE 9
#define NEW_TABLE_STRUCT 10
#define TABLE_STRUCT_BEG 11
#define TABLE_STRUCT_END 12
#define DATA_TYPE 13
#define PRIMARY_KEY 14
#define DATA_LENBEG 15
#define DATA_LENEND 16
#define PRIKEYS_BEG 17
#define PRIKEYS_END 18
#define FILENAME 19
#define IF_CMD 20
#define IF_CMD_END 21
#define IFCONDS 22
#define IF_COND_END 23
#define IF_BODY_BEG 24
#define IF_ELSE_BODY_BEG 25
#define PARAMETER_CMD 26
#define LOCAL_CMD 27
#define CLASS_CMD 28
#define CLASS_BODY 29
#define NUM_T2 30
#define NUM_OPERS 31

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 69 "/home/jens/Projekte/calcparser/p1.lpp"


#line 1391 "/home/jens/Projekte/calcparser/p1.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 388 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2253 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 72 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 74 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 77 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 78 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; BEGIN(INITIAL); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(COMMENTS); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 82 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 83 "/home/jens/Projekte/calcparser/p1.lpp"
;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("condition\n");     BEGIN(IF_CMD);        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("class beg\n");     BEGIN(CLASS_CMD);     }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("cmd: create\n");   BEGIN(CREATE_CMD);    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("ein parameter\n"); BEGIN(PARAMETER_CMD); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("ein local\n");     BEGIN(LOCAL_CMD);     }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "/home/jens/Projekte/calcparser/p1.lpp"
{ return FILENAME; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 93 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("lokslers\n");
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 97 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(IFCONDS); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 98 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("clasna1: -> %s\n",txt);
    free(txt);
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 105 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("varsi function hc\n");
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 109 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("caller function hc\n");
    BEGIN(IF_BODY_BEG);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "/home/jens/Projekte/calcparser/p1.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 115 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("an elser\n"); BEGIN(IF_ELSE_BODY_BEG);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 116 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("body else is false\n");
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 119 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("body else is true\n");
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 122 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("function else hc\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("if ends\n"); BEGIN(INITIAL); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 128 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("clasna1: -> %s\n",txt);
    free(txt);
    BEGIN(CLASS_BODY);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 135 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("class end\n"); BEGIN(INITIAL); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("loca2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 144 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("loca1: -> %s\n",txt);
    free(txt);
    BEGIN(LOCAL_CMD);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 152 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("para2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 159 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("para1: -> %s\n",txt);
    free(txt);
    BEGIN(PARAMETER_CMD);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 168 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("new: file  \n"); BEGIN(CREATE_FILE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 169 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("new: table \n"); BEGIN(CREATE_TABLE);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 171 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("wwwmos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("filserl1: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 179 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("ccmos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("filserl2: -> %s\n",txt);
    free(txt);
    BEGIN(INITIAL);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 188 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("fos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("tabsel1: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 196 "/home/jens/Projekte/calcparser/p1.lpp"
{
printf("mos\n");
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("tabsel2: -> %s\n",txt);
    free(txt);
    BEGIN(NEW_TABLE_STRUCT);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("beg\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 210 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    if (strcmp(txt,"primary") == 0) {
        printf("a key\n");
        BEGIN(PRIMARY_KEY);
    }
    else {
        printf("ident: %s\n",yytext);
        BEGIN(DATA_TYPE);
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 222 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("table struct ok.\n"); BEGIN(INITIAL); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 224 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf(" a key is given...\n");
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 228 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("1prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_END);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("2prikey: %s\n",txt);
    free(txt);
    BEGIN(PRIKEYS_BEG);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 242 "/home/jens/Projekte/calcparser/p1.lpp"
{
    printf("tabselle has prikeys.\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 247 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" B, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 248 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" L, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 249 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" N, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 250 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" C, \n"); BEGIN(DATA_LENBEG); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 251 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf(" D, \n"); BEGIN(TABLE_STRUCT_END); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 253 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("1>numser: %s\n",txt);
    free(txt);
    BEGIN(TABLE_STRUCT_END);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 260 "/home/jens/Projekte/calcparser/p1.lpp"
{
    char *txt = (char*) malloc(strlen(yytext)+1);
    strcpy(txt,yytext);
    printf("2>numser: %s\n",txt);
    free(txt);
    printf("nax\n");
    BEGIN(TABLE_STRUCT_BEG);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 269 "/home/jens/Projekte/calcparser/p1.lpp"
{
    add_num2stack(atoi(yytext));
    qDebug() << "num A: " << atoi(yytext); BEGIN(NUM_OPERS);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 273 "/home/jens/Projekte/calcparser/p1.lpp"
{ add_op2stack('+'); qDebug() << "add"; BEGIN(NUM_T2); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 274 "/home/jens/Projekte/calcparser/p1.lpp"
{ add_op2stack('-'); qDebug() << "sub"; BEGIN(NUM_T2); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 275 "/home/jens/Projekte/calcparser/p1.lpp"
{ qDebug() << "mul"; BEGIN(NUM_T2); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 276 "/home/jens/Projekte/calcparser/p1.lpp"
{ add_op2stack('/'); qDebug() << "div"; BEGIN(NUM_T2); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 278 "/home/jens/Projekte/calcparser/p1.lpp"
{
    qDebug() << "num B: " << atoi(yytext);
    add_num2stack(atoi(yytext));
    add_op2stack('*');
    BEGIN(NUM_OPERS);

    BEGIN(INITIAL);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 287 "/home/jens/Projekte/calcparser/p1.lpp"
{ HexaNumber(); return T_NUMBER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 289 "/home/jens/Projekte/calcparser/p1.lpp"
{ }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 290 "/home/jens/Projekte/calcparser/p1.lpp"
{ ++line_no; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTS):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(OPADD):
case YY_STATE_EOF(OPSUB):
case YY_STATE_EOF(OPDIV):
case YY_STATE_EOF(OPMOD):
case YY_STATE_EOF(CREATE_CMD):
case YY_STATE_EOF(CREATE_FILE):
case YY_STATE_EOF(CREATE_TABLE):
case YY_STATE_EOF(NEW_TABLE_STRUCT):
case YY_STATE_EOF(TABLE_STRUCT_BEG):
case YY_STATE_EOF(TABLE_STRUCT_END):
case YY_STATE_EOF(DATA_TYPE):
case YY_STATE_EOF(PRIMARY_KEY):
case YY_STATE_EOF(DATA_LENBEG):
case YY_STATE_EOF(DATA_LENEND):
case YY_STATE_EOF(PRIKEYS_BEG):
case YY_STATE_EOF(PRIKEYS_END):
case YY_STATE_EOF(FILENAME):
case YY_STATE_EOF(IF_CMD):
case YY_STATE_EOF(IF_CMD_END):
case YY_STATE_EOF(IFCONDS):
case YY_STATE_EOF(IF_COND_END):
case YY_STATE_EOF(IF_BODY_BEG):
case YY_STATE_EOF(IF_ELSE_BODY_BEG):
case YY_STATE_EOF(PARAMETER_CMD):
case YY_STATE_EOF(LOCAL_CMD):
case YY_STATE_EOF(CLASS_CMD):
case YY_STATE_EOF(CLASS_BODY):
case YY_STATE_EOF(NUM_T2):
case YY_STATE_EOF(NUM_OPERS):
#line 292 "/home/jens/Projekte/calcparser/p1.lpp"
{ return 0; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 293 "/home/jens/Projekte/calcparser/p1.lpp"
{ printf("syntac error."); return 0; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 294 "/home/jens/Projekte/calcparser/p1.lpp"
ECHO;
	YY_BREAK
#line 1980 "/home/jens/Projekte/calcparser/p1.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 388 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 388 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 387);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 294 "/home/jens/Projekte/calcparser/p1.lpp"



void Number () {
    yylval.val = atol(yytext);
}

void HexaNumber () {
    yylval.val = (unsigned int) strtol(yytext, (char **)NULL, 16);
}

void add_op2stack(QChar op)
{
    calc_struct * cs = new calc_struct;
    cs->op = op;
    calc_stack.push(cs);
}

void add_num2stack(double val)
{
    calc_struct *cs = new calc_struct;
    cs->op = ' ';
    cs->val = val;
    calc_stack.push(cs);
}

void get_stackResult(void)
{
    struct calc_struct *cs[4];
    
    cs[0] = new calc_struct;
    cs[1] = new calc_struct;
    cs[2] = new calc_struct;
    cs[3] = new calc_struct;
    
    float value1 = 0.00;
    float value2 = 0.00;
   
    while (!calc_stack.isEmpty()) {
        cs[1] = calc_stack.pop();
        if (cs[1]->op == QChar('*')) {
            cs[1] = calc_stack.pop();
            cs[2] = calc_stack.pop();
            
            qDebug() << "2--> " << cs[1]->val << " op: " << cs[2]->op;
            qDebug() << "3--> " << cs[2]->val << " op: " << cs[2]->op;
            
            value2 = cs[1]->val * cs[2]->val;
            qDebug() << "1value: " << value2;
        }   else
        if (cs[1]->op == '+') {
            cs[1] = calc_stack.pop();
            cs[2] = calc_stack.pop();
            
            qDebug() << "+2--> " << cs[1]->val << " op: " << cs[2]->op;
            qDebug() << "+3--> " << cs[2]->val << " op: " << cs[2]->op;
            
            value2 = cs[1]->val + cs[2]->val;
            qDebug() << "2value: " << value2;
        }
    }
    qDebug() << value2;
}

